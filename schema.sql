-- Enable RLS
alter table if exists public.categories enable row level security;
alter table if exists public.clients enable row level security;
alter table if exists public.products enable row level security;
alter table if exists public.orders enable row level security;
alter table if exists public.order_items enable row level security;

-- Enable Row Level Security
alter table products enable row level security;
alter table clients enable row level security;
alter table categories enable row level security;
alter table orders enable row level security;
alter table order_items enable row level security;

-- Create tables
create table if not exists public.categories (
    id bigint generated by default as identity primary key,
    name text not null,
    description text,
    status text default 'Ativo',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table if not exists public.clients (
    id bigint generated by default as identity primary key,
    name text not null,
    email text unique not null,
    phone text,
    status text default 'Ativo',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table if not exists public.products (
    id bigint generated by default as identity primary key,
    name text not null,
    price decimal(10,2) not null,
    stock integer not null default 0,
    category text not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table if not exists public.orders (
    id bigint generated by default as identity primary key,
    client_id bigint references public.clients(id),
    order_items jsonb,
    total decimal(10,2) not null,
    status text default 'Pendente',
    date date not null default current_date,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table if not exists public.order_items (
    id bigint generated by default as identity primary key,
    order_id bigint references public.orders(id),
    product_id bigint references public.products(id),
    quantity integer not null,
    price decimal(10,2) not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create user_roles table
create table if not exists user_roles (
    id uuid primary key default uuid_generate_v4(),
    user_id uuid references auth.users(id) on delete cascade,
    role text not null check (role in ('admin', 'manager', 'user')),
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    unique(user_id)
);

-- Create policies
create policy "Enable read access for all users" on public.categories for select using (true);
create policy "Enable read access for all users" on public.clients for select using (true);
create policy "Enable read access for all users" on public.products for select using (true);
create policy "Enable read access for all users" on public.orders for select using (true);
create policy "Enable read access for all users" on public.order_items for select using (true);

create policy "Enable insert for authenticated users only" on public.categories for insert with check (true);
create policy "Enable insert for authenticated users only" on public.clients for insert with check (true);
create policy "Enable insert for authenticated users only" on public.products for insert with check (true);
create policy "Enable insert for authenticated users only" on public.orders for insert with check (true);
create policy "Enable insert for authenticated users only" on public.order_items for insert with check (true);

create policy "Enable update for authenticated users only" on public.categories for update using (true);
create policy "Enable update for authenticated users only" on public.clients for update using (true);
create policy "Enable update for authenticated users only" on public.products for update using (true);
create policy "Enable update for authenticated users only" on public.orders for update using (true);
create policy "Enable update for authenticated users only" on public.order_items for update using (true);

create policy "Enable delete for authenticated users only" on public.categories for delete using (true);
create policy "Enable delete for authenticated users only" on public.clients for delete using (true);
create policy "Enable delete for authenticated users only" on public.products for delete using (true);
create policy "Enable delete for authenticated users only" on public.orders for delete using (true);
create policy "Enable delete for authenticated users only" on public.order_items for delete using (true);

-- Create RLS policies for each table based on user role
create policy "Users can view products"
    on products for select
    to authenticated
    using (true);

create policy "Managers can edit products"
    on products for update
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role in ('admin', 'manager')
        )
    );

create policy "Admin can manage products"
    on products for all
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role = 'admin'
        )
    );

-- Similar policies for other tables
create policy "Users can view clients"
    on clients for select
    to authenticated
    using (true);

create policy "Managers can edit clients"
    on clients for update
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role in ('admin', 'manager')
        )
    );

create policy "Admin can manage clients"
    on clients for all
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role = 'admin'
        )
    );

-- Categories policies
create policy "Users can view categories"
    on categories for select
    to authenticated
    using (true);

create policy "Managers can edit categories"
    on categories for update
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role in ('admin', 'manager')
        )
    );

create policy "Admin can manage categories"
    on categories for all
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role = 'admin'
        )
    );

-- Orders policies
create policy "Users can view orders"
    on orders for select
    to authenticated
    using (true);

create policy "Managers can edit orders"
    on orders for update
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role in ('admin', 'manager')
        )
    );

create policy "Managers can create orders"
    on orders for insert
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role in ('admin', 'manager')
        )
    );

create policy "Admin can manage orders"
    on orders for all
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role = 'admin'
        )
    );

-- Order items policies (following the same pattern as orders)
create policy "Users can view order items"
    on order_items for select
    to authenticated
    using (true);

create policy "Managers can edit order items"
    on order_items for update
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role in ('admin', 'manager')
        )
    );

create policy "Managers can create order items"
    on order_items for insert
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role in ('admin', 'manager')
        )
    );

create policy "Admin can manage order items"
    on order_items for all
    to authenticated
    using (
        exists (
            select 1 from user_roles
            where user_id = auth.uid()
            and role = 'admin'
        )
    );

-- Function to automatically set role for new users
create or replace function public.handle_new_user()
returns trigger as $$
begin
    insert into public.user_roles (user_id, role)
    values (new.id, 'user');
    return new;
end;
$$ language plpgsql security definer;

-- Trigger to set default role on user creation
create trigger on_auth_user_created
    after insert on auth.users
    for each row execute procedure public.handle_new_user();
